{
  "swagger": "2.0",
  "info": {
    "description": "This is description of API",
    "version": "1.0.0",
    "contact": {
      "name": "RAJEEV TEAM",
      "url": "http://FreeTrainingZone.com",
      "email": "myemail@xyz.com"
    },
    "title": "Title of MICRO SERVICE"
  },
  "host": "API_GATEWAY_HOST",
  "basePath": "/freetrainingzone/risk/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
     "/identityVerificationDetail": {
      "post": {
        "tags": [
          "identityVerificationDetail",
          "checkInstantId",
          "dataFromLN"
        ],

        "operationId": "identityVerificationDetail",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "description": "API Gateway Hosed APIs or Proxies : Client Id and Client encoded in Basic Auth format. API Provider : AFS Token.",
            "required": true
          },
          {
            "in": "header",
            "name": "trace-id",
            "type": "string",
            "description": "A unique number for every Trace and a 128 bit number encoded as 32 lower-hex characters.",
            "required": false
          },
          {
            "in": "body",
            "name": "identityVerificationRequest",
            "description": "Identity Verification Request",
            "required": true,
            "schema": {
              "type": "array",
              "items" : {
              "$ref": "#/definitions/person"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message processed successfully.",
            "schema": {
              "$ref": "#/definitions/identityVerificationResponsePayLoad"
            }
          },
          "400": {
            "description": "Bad Request -The server cannot or will not proceess the request due to an apparent client error (e.g. malformed request syntax, size too large, invalid request framing, or deceptive request routing).",
            "schema": {
              "$ref": "#/definitions/serviceError"
            }
          },
          "401": {
            "description": "Unauthorized. When authentication is required and has failed or has not yet been provided.",
            "schema": {
              "$ref": "#/definitions/serviceError"
            }
          },
          "404": {
            "description": "Not found: The requested resource could not be founf but may be available in the future. Subsequent requests by the client are permissible.",
            "schema": {
              "$ref": "#/definitions/serviceError"
            }
          },
          "500": {
            "description": "Internal Server Error: A generic error message, given when an unxpected condition was ecnountered and no more specific message is sutiable.",
            "schema": {
              "$ref": "#/definitions/serviceError"
            }
          }

        }
      }
    }
  },
  "definitions": {
   "intendedUseOfData": {
      "type": "object",
      "required": [
        "category",
        "subCategory"
      ],
      "properties": {
        "category": {
          "type": "string",
          "minLength": 5,
          "maxLength": 5,
          "description": "Required Category. Values IDERF"
        },
        "subCategory": {
          "type": "string",
          "minLength": 5,
          "maxLength": 5,
          "description": "Required SubCategory. Values CCACQ"
        }
      }
    },
   "person": {
      "type": "object",
      "required": [
        "personName",
        "address",
        "partyRecordIdentifier"
      ],
      "properties": {
        "partyRecordIdentifier": {
          "type": "string",
          "minLength": 9,
          "maxLength": 40,
          "description": "A Unqiue Id Assigned to party record."
        },
        "birthDate": {
          "type": "string",
          "minLength": 10,
          "maxLength": 10,
          "description": "Optional Specify the year month and day of party birth date."
        },
        "personName": {
          "$ref": "#/definitions/personName"
        },
        "address": {
          "$ref": "#/definitions/address"
        }
      }
    },
    "personName": {
      "type": "object",
      "required": [
        "firstName",
        "lastName"
      ],
      "properties": {
        "firstName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 15,
          "description": "Required First name of the party."
        },
        "middleName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 15,
          "description": "Optional Middlename of the party."
        },
        "lastName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 25,
          "description": "Required last name of the party."
        }
      }
    },
    "address": {
      "type": "object",
      "required": [
        "addressCityName",
        "addressStateCode",
        "addressPostalCode"
      ],
      "properties": {
        "streeAddressLine1": {
          "type": "string",
          "minLength": 0,
          "maxLength": 70,
          "description": "Street Address Line1"
        },
        "streeAddressLine2": {
          "type": "string",
          "minLength": 0,
          "maxLength": 70,
          "description": "Street Address Line1"
        },
        "addressCityName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50,
          "description": "Address City Name."
        },
        "addressStateCode": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "description": "Address State Code."
        },
        "addressPostalCode": {
          "type": "string",
          "minLength": 2,
          "maxLength": 2,
          "description": "Address Postal Code."
        }
      }
    },
    "identityVerificationResponsePayLoad": {
      "type": "object",
      "properties": {
       "verifiedInput": {
          "$ref": "#/definitions/verifiedInput"
        },
        "riskScores": {
          "$ref": "#/definitions/riskScores"
        }
      }
    },
    "serviceResponseHeader": {
      "type": "object",
      "required": [
        "statusCode",
        "statusMessage"
      ],
      "properties": {
       "statusCode": {
          "type": "string",
          "minLength": 4,
          "maxLength": 4,
          "description": "Required, Repreesnt the status code return by the service."
        },
        "statusMessage": {
          "type": "string",
          "minLength": 1,
          "maxLength": 50,
          "description": "Required, Repreesnt the status message return by the service."
        },
        "serviceTraceId": {
          "type": "string",
          "minLength": 1,
          "maxLength": 40,
          "description": "Unique ID assigned by the service to the request."
        }
      }
    },
    "verifiedInput": {
      "type": "object",
      "properties": {
        "verifiedInputCount": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "maximum": 20,
          "description": "Total number of inputs verified by the service"
        },
        "verificationCode1": {
          "type": "number",
          "minimum": 0,
          "maximum": 999999999,
          "description": "A  numerical code generated by the service."
        },
        "verificationSource": {
          "type": "string",
          "enum": [
            "Internal",
            "External"
          ],
          "description": "Source of data verification."
        },
        "verificationCode2": {
          "type": "integer",
          "maximum": 9999,
          "items": {
            "type": "integer",
            "enum": [
              "403",
              "9074"
            ]
          },
          "description": "verificationCode2 only only one of two values should be retruned."
        },
        "verificationCode3": {
          "type": "integer",
          "format": "int32",
          "minimum": -99,
          "maximum": 99,
          "default": 99,
          "description": "Verification Code3 A numerical code generated by the service."
        }
      }
    },
    "riskScores": {
      "type": "object",
      "properties": {
        "riskScore1": {
          "type": "number",
          "format": "double",
          "multipleOf": 0.0001,
          "minimum": -9.9999,
          "maximum": 9.9999,
          "description": "Risk Score 1 in decimal format"
        },
        "riskScore3": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "maximum": 9999999999999999,
          "default": 9999999999999998,
          "description": "Risk Score 3 between 0 and 9999999999999999."
        },
        "riskScore4": {
          "type": "number",
          "format": "double",
          "multipleOf": 0.01,
          "minimum": -999.99,
          "maximum": 999.99,
          "default": 999.88,
          "description": "Risk Score 4 in decimal format"
        }
      }
    },
    "serviceError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string",
          "description": "Error Code returned by the service prcoessing."
        },
        "errorDescription": {
          "type": "string",
          "description": "Error Code description."
        },
        "validationErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/validationError"
          }
        }
      }
    },
    "validationError" : {
      "type": "object",
      "properties": {
        "fieldName": {
            "type": "string",
            "Description": "Field Name in Request where validation error occured."
         },
        "validationErrorDescription": {
          "type": "string",
          "Description": "Validation error description detailing what validation failed."
        }
       }
    }
  }
}